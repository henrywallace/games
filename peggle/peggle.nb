(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    155577,       2964]
NotebookOptionsPosition[    153778,       2898]
NotebookOutlinePosition[    154160,       2915]
CellTagsIndexPosition[    154117,       2912]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["t", "k"], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "-", "t"}], ")"}], 
     RowBox[{"n", "-", "k"}]]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"1", "/", "2"}], ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6543889185207243`*^9, 3.65438893771833*^9}, {
  3.6543951698619843`*^9, 3.654395173065507*^9}, {3.654432933647696*^9, 
  3.65443296419904*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", 
     RowBox[{"Beta", "[", 
      RowBox[{
       FractionBox["1", "2"], ",", 
       RowBox[{"1", "+", "k"}], ",", 
       RowBox[{"1", "-", "k", "+", "n"}]}], "]"}]}], "+", 
    FractionBox[
     RowBox[{
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "k"}], "]"}], " ", 
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "-", "k", "+", "n"}], "]"}]}], 
     RowBox[{"Gamma", "[", 
      RowBox[{"2", "+", "n"}], "]"}]]}], ",", 
   RowBox[{
    RowBox[{"Re", "[", 
     RowBox[{"k", "-", "n"}], "]"}], "<", "1"}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.654388939906137*^9, 3.654389766755961*^9, 3.654389917497282*^9, 
   3.6543951759788637`*^9, {3.65443293870315*^9, 3.654432966952797*^9}, 
   3.6544446398691177`*^9, 3.654507625717105*^9, 3.654540078298642*^9, 
   3.6582717041677933`*^9, 3.674170325195882*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox[
    RowBox[{"Gamma", "[", 
     RowBox[{"2", "+", "n"}], "]"}], 
    RowBox[{
     RowBox[{"Gamma", "[", 
      RowBox[{"1", "+", "k"}], "]"}], " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"1", "+", "n", "-", "k"}], "]"}]}]], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Beta", "[", 
       RowBox[{
        FractionBox["1", "2"], ",", 
        RowBox[{"1", "+", "k"}], ",", 
        RowBox[{"1", "+", "n", "-", "k"}]}], "]"}]}], "+", 
     FractionBox[
      RowBox[{
       RowBox[{"Gamma", "[", 
        RowBox[{"1", "+", "k"}], "]"}], " ", 
       RowBox[{"Gamma", "[", 
        RowBox[{"1", "+", "n", "-", "k"}], "]"}]}], 
      RowBox[{"Gamma", "[", 
       RowBox[{"2", "+", "n"}], "]"}]]}], ")"}]}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.654389176138332*^9, 3.654389202884025*^9}, {
  3.65443294839999*^9, 3.654432970718799*^9}, {3.654433011893659*^9, 
  3.654433037203204*^9}, {3.654433110417632*^9, 3.65443311686604*^9}}],

Cell[BoxData[
 RowBox[{"1", "-", 
  FractionBox[
   RowBox[{
    RowBox[{"Beta", "[", 
     RowBox[{
      FractionBox["1", "2"], ",", 
      RowBox[{"1", "+", "k"}], ",", 
      RowBox[{"1", "-", "k", "+", "n"}]}], "]"}], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"2", "+", "n"}], "]"}]}], 
   RowBox[{
    RowBox[{"Gamma", "[", 
     RowBox[{"1", "+", "k"}], "]"}], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"1", "-", "k", "+", "n"}], "]"}]}]]}]], "Output",
 CellChangeTimes->{{3.654389198000422*^9, 3.654389203526434*^9}, 
   3.6543897670743027`*^9, 3.654389918920019*^9, {3.654432951241901*^9, 
   3.65443297113417*^9}, 3.654433038366647*^9, 3.6544331172430067`*^9, 
   3.6544446400904303`*^9, 3.654507625986083*^9, 3.654540078563716*^9, 
   3.6582717045236464`*^9, 3.674170325775366*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"k_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"1", "-", 
   FractionBox[
    RowBox[{
     RowBox[{"Beta", "[", 
      RowBox[{
       FractionBox["1", "2"], ",", 
       RowBox[{"1", "+", "k"}], ",", 
       RowBox[{"1", "-", "k", "+", "n"}]}], "]"}], " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"2", "+", "n"}], "]"}]}], 
    RowBox[{
     RowBox[{"Gamma", "[", 
      RowBox[{"1", "+", "k"}], "]"}], " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"1", "-", "k", "+", "n"}], "]"}]}]]}]}]], "Input",
 CellChangeTimes->{{3.654389550123282*^9, 3.6543895571171837`*^9}, {
  3.654389590946183*^9, 3.6543895931542892`*^9}, {3.6544329961580763`*^9, 
  3.654433003655929*^9}, {3.6544331207706623`*^9, 3.654433126373097*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"22", ",", "39"}], "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.6544527952167263`*^9, 3.654452809628707*^9}, {
   3.654452875225566*^9, 3.654452893769486*^9}, {3.654540206934393*^9, 
   3.6545402078655863`*^9}, {3.6545569342530403`*^9, 3.654556936220992*^9}, {
   3.654556968052095*^9, 3.654556976015903*^9}, 3.6582717088988857`*^9, {
   3.65827205186066*^9, 3.65827206700273*^9}}],

Cell[BoxData["0.7852047460783069`"], "Output",
 CellChangeTimes->{{3.654452806266078*^9, 3.654452809894074*^9}, {
   3.6544528795151367`*^9, 3.6544528944593477`*^9}, 3.654507626044341*^9, 
   3.6545400786267014`*^9, 3.654540208541857*^9, 3.6545569373870173`*^9, {
   3.654556974043728*^9, 3.654556976202327*^9}, 3.658271706035438*^9, 
   3.658272067507888*^9, 3.674170325901003*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"12", ",", 
    RowBox[{"12", "+", "11"}]}], "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.654391035704322*^9, 3.6543910492521887`*^9}}],

Cell[BoxData["0.5805901288986206`"], "Output",
 CellChangeTimes->{{3.6543910467361383`*^9, 3.654391049867568*^9}, 
   3.654433129097651*^9, 3.654444640156907*^9, 3.654507626082008*^9, 
   3.654540078672456*^9, 3.6741703259734793`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"20", ",", "30"}], "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.654434028832244*^9, 3.654434042977366*^9}}],

Cell[BoxData["0.9646222270093858`"], "Output",
 CellChangeTimes->{{3.654434037188628*^9, 3.6544340449160624`*^9}, 
   3.6544446402084618`*^9, 3.6545076261374283`*^9, 3.654540078725832*^9, 
   3.674170326050378*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"k", ",", "n"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "0", ",", "n"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "10", ",", "100", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.654540137689117*^9, 3.654540158742269*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 10, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n$$], 10, 100, 1}}, Typeset`size$$ = {
    360., {109., 113.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`n$7332$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = 10}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$7332$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        $CellContext`f[$CellContext`k, $CellContext`n$$], {$CellContext`k, 
         0, $CellContext`n$$}], 
      "Specifications" :> {{$CellContext`n$$, 10, 100, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{405., {153., 158.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.654540159408881*^9, 3.674170329785489*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"steps", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"k", ",", "n"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "100", ",", "20"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"steps", ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "0", ",", "100"}], "}"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"Range", "[", 
     RowBox[{"1", ",", "100", ",", "20"}], "]"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.654389653705117*^9, 3.6543897847579*^9}, {
  3.654389913439219*^9, 3.6543899136075706`*^9}, {3.654389975989223*^9, 
  3.654389978804205*^9}, {3.6544330521296988`*^9, 3.6544331453601313`*^9}, {
  3.6544331806791286`*^9, 3.654433199644517*^9}, {3.654433255258786*^9, 
  3.6544333218267307`*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.368417, 0.506779, 0.709798], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
atg+c5QKLXdbPpH4kFey9ogUDXoVVmO9MHXJHJf3MjSI+ftbmcSLHkztTFeg
QcpAKPrL4pCj848r0sCneBLuP4cqtcVHmQaeWu/5yLdX3z5YatCg+8uvnSSW
ivdcoKlFg3Wto+g/Y5w73cbr0CBquAnjuZaOU+onPRp8mOaL+S67u/7Tc0Ma
zOq/cw793G2m3u1FNJh6MfoS+i+/Mo/TZjS4GdCL/UAXK5t0fwsaFK+vxH7P
97/5XY7WNChJ08xA/T9dbAA2NDDc2olYKer6Np21NHCyVUOcxJmXIUehgdTR
J/h7M9WELz10Goyf3o3XL307w7CWRYPFdnF4f8HV6O25PBqUfavD8X1wl70Z
L6KB3vw8HL+f0aGegw40UJX+1y+R+T5k5OJMrO/VB+gP4/K9d9i50MDokdIu
Eueu2dw31ZMGuS49QvTncm9Mfuygge3R2xT00y943o0+NDCvbcLnj4YktgOX
99FgJuWrGsaLAN97TQeJ9f9dKof3P3clZHoIDfITFvWT+/vj9YhyaCQN5guf
3SDxkp8L2wpP0CB53p4oEvsqr08bjKXB9vtBXiQe4OVauifQwM9YaimJF/l2
jr98mQZ/lsjPxnrl1PSqxms06H+SJIP8yrI5o5hOg2mPx30j+dhTs8OZdpMG
k80cka+G/Ql6IVk02F/WjPnBc+rzgft3aSDceBnzY4bxr3s/CmjwpLQU/Vo3
QzfU6AHxuft6rJ/0vQQMt8c0GLVyRbw1KkTl0lMaqN1vw++nZWS1NTyjQVzf
Q7zep2dtadOqaXDnWi/eb0G3gg+1jgazb9jjeLbIWVsFNxD8ss4eIPE1vW3S
998Q+7elD/N5h925qu9tNOAmVqK/1nZ/esawkwZvnCcvIfGmIz+ct3ymwdY2
NwaJ3z1hf3vdT4MrSuvC0Q+CnOo9KTo8nVA2ntyP2ZuWvfsmQwdHk04lEjsc
3pK+cBIdJI+K5pH4wqVYH9cpdDgSqbcE/dODYqvE6XQ4df83kHhWa5/0axU6
iNfJYz0hGdF4MUWdDi/Fy5xIfG62/Vk7TTqEF4q3Il+s9m08PI8OIUvZeB6s
4pCmX6BLhzsNf/H5GcG+198GFtLhK5eD+jt9XrrQYBEdcs0Mo1Ff+aZhLmZ0
4GkePkXi6Y0bmQkWBB5cdQb1PnRctd6aDht+bUb+x6gUvVMAOnS+70Rcs/RL
+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
+27dhgJgOo5wOA7UDeIDAKOMHQY=
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.880722, 0.611041, 0.142051], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
vQVPhn31uQ4UXKFAU/iTRwx/zuLSuHODAjcnbPoYpglyL0YlUyBv1kh0CTsj
kLvBL4MCcLBvK8Ncfdyph3Mo8C0t0IthXxMeb7MnFPjiYB/P8OciHn29cgo4
5HWWMkyT4hVUq6FA1VFKx99+Ybx9ovUUULqRNcsw5wjvE5YWCjy84ye4jO1t
xRc+1kmB7fnNagx/esFn3dVHgRdjY8DwFiV+5bpfFLhYR7Bi+G40/1zxJAWk
FLVcGeaY5X937zcFalLS/Rn2tBe4HctChcn6kIsMt9QKHA/iosJll9HrDOvq
CG45JkSFVYGcaQynJQry7JOkQuXtiezlv/erULfhWipEcVc9YdjjqFC+jjoV
bg7Hvfjb74NQiDSZCvR9p1//7acrvJdzMxWSY67W/+13V1hh1oAKF9b0Nv/t
xyUy2WdMBc2ByM8Mu58QqWkyp0Ki/bUuhps7RW6+2E8FiVs8vQxv3Crqku1E
hVP7Ob4znJIjuiHhGBUsaDE/GWYVEeMI86UC59vcYYaPBYm1ewfieQM86Qw3
DYhl24VSwbS/Y5zh9XvEzxhfokLLq9+TDDPLSkgr3qYCU+PpWYYb6RIVi1lU
UHgku8CwW5wkS+E7KqyGmEWGCWTpHUd+UsFul80ywyQ/ucY6lfUwdFKXQCCM
ocOla/cR3dZDmjHpr0PWvDVpcNgA0esW/tbfOeMOx203Qu42wt/81E5XJzXX
TeCAd8vId4s4hf08qQubmf6X12ffaEjy3gyRy//LTaBWfI/7FuAh/C8P1zeL
VQjSg4X/zysM2tlnr9KA6f9z39124z75/6xo861juIkGhP93pMfP3F4htGLz
xHmLhlv/PDHD3dRsDivWEHHeemeX/orlU4W+Rx0wWPGL8fn8ozaGKxYuWJ95
/NjWFVdXcZ7w9t+24jUpoq5uvtv/9R8IiAwN3bHigSnB5piQnSuesdk6lnra
aMVVKvWbmyOMV0x9dTl/9oLJig+/TjdDN3eteEja9E1U+u4ViyPKkdqkPStm
qvfSVn5kuuK3sT4CepZmKy4f8Jt2bfrnaG/lsbX79q646OvkufaWfy4OO64o
Z2e+Yh7eZTuHL/8cq9/NpGBrseKxbLfykz3/nDHHy/XqkOW/+c46eKf8+OfJ
rEW06GG1Ytby4ntWv/55kkVSBp2w/ne9TpKGwsQ/32NzvX/Rc9+K6YLdlLPT
/xzD4mNz/ITNimU6xjKflv5zXoE3/t388/8Bb/+NjQ==
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.560181, 0.691569, 0.194885], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
/h9yuyXW
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.922526, 0.385626, 0.209179], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
mMOuW2THeylaouhZj0XWZLJ3TjpaoSIp3rs73pJtLrBojUa/nq1810y27eVj
tuha03mrzD6yA2i+H0W7aQKu+9OL456DDMfRA9tWhBx4yD7CZu+AVioGFxIk
yFZ4oH8CTXYM/c1HILuBXsMJTfx740WXFdlbcpSd0TtRt/yeniTb4BHigoYX
J7IphZG9Nd/XFQ01Tv62eI/sDvZnbmhQ75OUt8/Idts1cAr1YX25z/Q92Qd1
bruj7imFq9zfyGasoDmLuu4vq+sYIHup/Yonamf//qgbgwTuc9vtvVGr2U8S
8jxkW8Vr+qCHwptJ87vI/pu46xxq8OrX1au6ZPfs5D2PQkKfqdFhsgVe7LiA
anYO8W91wh3S+V7FD1VgmslODiXnJWNRF9E9SX/Pu8SRc5E9XwJQCYVVIJNG
tvQxoUB0uy1zW+k7cn2ZyWgwykPanBzylWwJdeUQdMs1bjdCH9kJ8mshKEOu
yEobjSRmeMc2JxRd0xH/kMSJuyraKe4quvRDOtZRlGz3pdBr6CStsvgUIJvl
2fUwdDheY7L4ILl/sDDxBvp7LywJOi5Jvq9eSTj609LYhO0y2QrcOyLRllEz
vpZocn/qedco9Mtlq97EZLIPplXeQqszT/hKVpJNO2cai5ajrujEF9y9idlb
b6OvW92ZC7twp77e0X0bzVn1e6i9Sj7fsyzuDhp/KLrWTms33u/CdCEBjR26
E73LBDdcab2ZiEZeum89ehS3g3FN9n005NnTcb9LZHtw8jxEAzSyitFI3KIF
wXaP0PNNL0MYk8i5pmJBMnp6qYznThnu3t89H1JR5+iqbptPuJtL3SMeo8d3
fcgQ7cAdYmpjkYZamH7Vyl0i93/MZ3iKIo//ONerSeH139+1P0fnHlYf6jfE
3TvaTZOJZiU+Qv/Z4q7qv66chfLFHhaQDcKt8LmpPgdtiJRjNIjGLSqdvycX
Db3BMmOfgtuLdD/pJToZ/PZz7DvcbjO7rPPRpwEPSjJbcC/OVe15hdpeOP+s
+jfu8B/fmQrQOo+9l+cYpTF/DGTvKkRT7RKUrI1we6kPbi5Frax9dngfxa3g
dV6tDGW3MGW/6Y7bnyjv9Qb1N6YfehONWyrZgqUSlSN0t7Sl4LbePnzmLTqg
U/p2Io/shuWzVeghDc/7O1px1z6/sfQOZVYxClMbwG3xtfRzNfZ5lzh3aB53
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
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.528488, 0.470624, 0.701351], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1:eJxF2nk4VN8fB3BESbbsSQgVJVv42u49hyyDmbGEbBVCioSUpZIkqRBKVEIl
smTJLrJEqWSrlKWyZcky9iTL796Zya9/el7P+30+59wz13h6nrY7nTJ3YWJg
YHi2joEB/1vi5vLjJNEalAH/EyyPGHinbzzplgyoZmipMOuVvSntlktzizyy
yvyKyBFVQnOePGJ1l2K23q2KngOkXSAqazXl1VrO5CgltxT5huYUeWRvVnne
QuB7mhsAYj1num/uWPNavzZ5ptM/s5XmannkSx0q8jvlI83R8sjYyLVDZ+I/
0zwMECauz0kzkV/o522oEFIW7/EO7Vjry9m4b58M7FqbrxtU7OTp/W2tb/OY
MXXs2A+6qyv+c07zUcntAf/uo3be+JZvZu/a85OuTRUUPOlbm/d1a/yn6ZT+
tf2O5mjNKSYOrOUTsI/fO/7nWr7Ode9BSuTQ2nyhG/4JJ0NH1iyX96pjNHB0
bX2ZzvHF3WfH1vbX/cy59YT3+Np5m48VamZ4TKz1bRdt7IePUdbu1+f1xZe3
FCfX9i+92Ubelzu59vzL1jt+tMlOrX0+OhL+p3wyp9bmhY++W90sPb3mD4Xb
ovOfTK/NszZ4lTeZMrO2PolbQDtadHbN/R1urfKJ/7f04xeOzVvm1s7n6cE5
7Rk/t3aeQhXHEE7++TX/WSngyYml20seQRvWPyZx/147T2iMzb7xyN9r95fb
RSkaCfxLs4M80rkjTG3w2OpaX4RFMmJZlRX+85NzjCvrDnHDf+tt4lvaLa34
1sxRkJybbiK01jdvOrG4QthCM/Z+Joyo6FnpCNPMqoAwkG7KXXKkO0UMOZ43
LJgdTHewGNLGq8P4JZluBjVEw+/+L8aq//cfd85+lP1O98J/CDtKrjy4TPek
POL7MD0tRGQrzT1iyDdmxuhnmlvX9td3sw34avvPakjO+wKndYF0cysggvIc
RLm7/3dwrKuKTek/iyPDc1WioV/+WQ0xs9nCmjv//355hc9UB78IzeJqiIR4
Yyezisjafjcu76iTt6BbSA2ZHQx6ZnuabmkFxN7o650rsXQ7iCP1zxSD8/Lp
NlVD5DbfON7VQreCAnLHd8B8/STdamrI6hdES5FrG/2+xBE3zfgd9nJ0uykg
LUmTnFdJdBPUEHUmo4V8D7qrxZFHLo97u2/Q7aWAsL1derchi+5gNeS0rFWh
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
w8LOmzo3MA8/X2pYmjaGREubqkTMG4+yrL/61xjGFZxxfImZ+Eog+D47EQYy
lcQsYT609X5SDzcR7npctG3TCvZ9cVqscgc/EZatiBG2YL4pKb2Yu40IdZlD
Liljbrus7lsnR4RfJ1/XuWLu76qM3biPCFOk34f4YJ7dp5NP/o8ILd1iJi9g
5h8wmvgKiLD9j2L/LczWuvZu46ZEKG3KZlOB+XhiT5iSJRH67y96W485cNb5
iZ8NEb7Tyl5ownw/9WQfoxMR1jGxJPRg/s580V7gNBFmMLOzMq5i77f9unN2
fkRon8sSz4p5tfDq3ZRzRNjH7znJhVncJbp9dygR8uT92SCK+Wj9Q1MQR4Sz
EoYT/2F+Hegf6HUXe566gA4Es7SCSerDB0Qo3/Di3n7MY/eWfq9LI0LPjuLH
ZMy+XgeTG4qJcL8h45gT5vYdcm//lBPhC3A09RhmtS7mmd1VRNgf8FLDA/OS
3nP9yDdEWB8wxHwGc+hWjgmzr0QosiVi5xXMgy39gpe7iTD51bHBcMyEsHLt
wh4inI6pux6BmX3qWJzACBHyE0cu38Ic97pWq+sPEX7J0TJOwbxw7q4r+woR
zvxJ1nmM2VbRKxphIsFWo37JNMyiidsGktlIUGzQPS0Lc5q3/w3nrSQ4Ieb0
oggz6y6TojgxEgS+LzeXYj7RvePHa0kS5DnsYFWOWc7go5KMLAne7nXNfok5
einD3laBBKPvVLysxjydHxx2Q5kEd2hp1NRiLhGR6xzXIsFjFz0TXmMWbmNm
FtMmQecrKycbMJ+/2rXXVI8ETTyPq7zDDKfDLz0nkeDDBOf7HzA3vOmX9jtM
goUUr6aPmHdfKDd/6kSCR2bckc+YI5Rizne4kqAH5+6H7ZhNH6AtmqdI8POs
KqED83Nz/kWP0yRYyS0V0YmZj3VMMsmPBM+vcr/uwtzhc9ePIZgEv1pyb/uO
WUva66FiKAkKd+Rp/MCc9E3/vVM4CRYEnTTpwexEmBWtjybBvH6dI32Yf20z
eX3tIQnmCCuJDWI+9fx1hc8TEtxSODyOe1YfLbDLIEGOxNDiIczLp/am7M0n
wWxfIdURzCHMT+4IFJEg+vzoOO71d0UiV0tJ0PanRvIvzNy1mwJbq0lQWkl6
ZhT/vK0ue5XXkSCZdC1uDL/P0UXXxw0kuOEk+75xzJJ8vw6caSHBv/8xO0xg
VnVt2LulhwQv7rG+Mon5xSKQYhogwQBLT+Yp/L5vlgiPDpHgp8a0i7gNS9M2
VFKwzxulnJjG3EQUXXkyQ4KyaSpduM1742ajfpPgKe1NhBnM9mxXeh1WsfdF
4K3gLOaepKUvhuvIMEG8LxC3yz7fJqUNZOwf6GOduD3tj75g5iLDpAXZ2DnM
l3K0456KYjZ98WMef/79ZTdiJMjQvbZE9jfm618UQgJ3kqHYgJEf7tsM4qeI
cmSYVXKBZQGzUFy8i4oSGYqcgIa4H8hw2YuqkqHMpx/XcaeZrxAmEWxe/NyG
P5j3DJ0BHdpkmKt8Yz/uvHPjKrV6ZHhPUOsC7rLUbonbJDIUCpEZxd04X770
3yEytLPNf76I2eyG0oy4IxlOxj/qwd0uljmy0YUMw/OEOP5i/kG4297lQYbn
nWoccTt/4/5Q50WGHBJs13EPe4e/euaL5RzM+bin7/nlXTxPhtqGyn9x+8lT
0tyCyZCTHCS6hH9fvHJ9YBZKhjmjKRA3y7jldckIMjQ0vH0JtxBQdn5znwxt
PCV/4ybudexnTiFDQW1HvmXMF7dGOemkkqGsQqwC7sHfQw6V2WTYWDXlglt4
kK9nMY8Mkz8pXsRN/qR9RK2IDN9PX43HXZR3/1BBJRn2KNypxz2c1NA9WYM9
T/KhLtwikXN2cq/JkK/EZhJ36HET24wmMiR82SS0gr8vEusOJv8gQ+tFziO4
w7gV2rv7yTAiUvkU7rIVe0vhYTLcyl8ThFu8q/hA3CQZdjhKJeK2eNvf1jZL
hqyuLJm4w0u4zbn/kKHzD8cS3JRbJ0xvMJpAia7kFtwSIfHNDSwmMJh8vRu3
lVcdeT2bCbyylWkY90uiKOkSjwmUZM1cxh3B0mboJ2kC/a/rSa1irp5ZaSjc
ZQJvKq7fi3umdw9heo8JFD/srYLb9uUV/ZPKJnD53gE93FHZz+sz1UygSUwL
EXftvR+6w1omcLBznQVuGT/1/Uf1TOCMSIIjbnsX19oUQxPs/Vs5hjv6wC3t
7yQT2PBDyhP3gvw4sLEygRYalQG4Xw+naJkcM4Fv46yicC+2f3gR4W4CswJW
YnHL1S9qvDuF7R/uF4877qGFup6/CYzAvuZxN9y8VBpy3gR6LXQ+xr10Iee/
6mATWJ6ekY7b2ZZVVfOaCTS79ikHdwJBpcg/0gRyJu57jvu9qpNycQz2vLpe
RbiVeCuUFO+ZwKsRV1/gZmw8Jb8rywTuqTd5jdv6LnJOJNcEJkrGNeDOcd30
ZnOBCRQNq3tHvT/G9MNL5SawPmigCff6RJ35wVoTqFVW1Ib7uer3yNZ3JjCm
HWnHfbg1YEdFmwm8xh/SgXuTB39lWqcJXLS+2k09/0Pi2LlfJtCzZbAXN7fW
8GXXaRPopGQ4gLuy/fJWs0UTOLRyfhB3UenNjm2MprAs+cowdV7YoR28LKbQ
Vdv1F+5S8T8Vy+ym8L3Yi3Hq/Be3LYb5TKHh++hJ6rzJ95crpUyhrwzLHG6B
nesKYpVN4Vkz9QXcp+w0+o7pmsKuK6GL1PuP9t6MWJjCyA27lnDraPpeNo81
hVM7+VdxV/w8O3esxRR+2thI9Y49zdP1vGbwYfU81VFeuyYlD5pBu5AVqsWf
RpasxJnBpupVqgt+zAR1fDKDYfM0Kz/PbV0SMofjKzQXh7pLiR8yhz9XaXYy
VNGuTjSHy3RzcK4ecug2x/9/BPZnEjSlT8jXCB9Yc7T2d0YJm/97MtOtwrfn
/05d4NxUc9hizSrnHbyShv7vmYxlsHzScs3MFcWPLUf/75l1W0XBaav/r1e4
Lysx/X8/Xn/sSZjnwTVTeL4rn5/7v2+u87Z2P229ZtHOyfSisv87J8/r9+rq
//0/ErMRzA==
        "]]}}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None}, 
     PlotRange -> {{0, 100}, {-4.3520742565306136`*^-14, 1.010404267039652}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"1", "21", "41", "61", "81"}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.922526, 0.385626, 0.209179]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.3523253333333333, 0.3137493333333333, 
                    0.46756733333333333`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.528488, 0.470624, 0.701351]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.528488, 0.470624, 0.701351]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.528488, 0.470624, 0.701351], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.6544330788973637`*^9, 3.654433147350568*^9, {3.654433190084922*^9, 
   3.654433201602438*^9}, {3.654433267257659*^9, 3.654433339835794*^9}, 
   3.654444640525172*^9, 3.654507626522094*^9, 3.654540079216263*^9, 
   3.674170330481201*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"n", "/", "2"}], "+", "1"}], ",", "n"}], "]"}], ",", 
   RowBox[{"n", "\[Rule]", "\[Infinity]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6544338502894783`*^9, 3.6544338965273933`*^9}}],

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{"1", "-", 
    FractionBox[
     RowBox[{
      RowBox[{"Beta", "[", 
       RowBox[{
        FractionBox["1", "2"], ",", 
        RowBox[{"2", "+", 
         FractionBox["n", "2"]}], ",", 
        FractionBox["n", "2"]}], "]"}], " ", 
      RowBox[{"Gamma", "[", 
       RowBox[{"2", "+", "n"}], "]"}]}], 
     RowBox[{
      RowBox[{"Gamma", "[", 
       RowBox[{"2", "+", 
        FractionBox["n", "2"]}], "]"}], " ", 
      RowBox[{"Gamma", "[", 
       FractionBox["n", "2"], "]"}]}]]}], ",", 
   RowBox[{"n", "\[Rule]", "\[Infinity]"}]}], "]"}]], "Output",
 CellChangeTimes->{{3.654433863304615*^9, 3.654433899177326*^9}, 
   3.65444464059533*^9, 3.654507628828575*^9, 3.6545400814963007`*^9, 
   3.674170333439623*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "n_", "]"}], ":=", 
   RowBox[{"FindFit", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"f", "[", 
        RowBox[{"k", ",", "n"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"k", ",", "0", ",", "n"}], "}"}]}], "]"}], ",", 
     FractionBox["1", 
      RowBox[{"1", "+", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"-", "a"}], 
         RowBox[{"(", 
          RowBox[{"x", "-", 
           RowBox[{"n", "/", "2"}]}], ")"}]}]]}]], ",", 
     RowBox[{"{", "a", "}"}], ",", "x"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "@", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", 
      RowBox[{
       RowBox[{"f", "[", "n", "]"}], "\[LeftDoubleBracket]", 
       RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "20", ",", "200", ",", "10"}], "}"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.654396833382711*^9, 3.654396893534786*^9}, {
  3.6543969300352182`*^9, 3.654396983180276*^9}, {3.6543970404379473`*^9, 
  3.654397089227941*^9}, {3.654397142019545*^9, 3.654397232255959*^9}, {
  3.6543973279038*^9, 3.654397358560519*^9}, {3.654397414923079*^9, 
  3.65439746641206*^9}, {3.654397502080762*^9, 3.654397523455892*^9}, {
  3.654397566577029*^9, 3.654397579456492*^9}, {3.654397786315254*^9, 
  3.654397787466197*^9}, {3.654433355258436*^9, 3.65443336255273*^9}, {
  3.654439800820743*^9, 3.65443982467859*^9}, {3.654439935704626*^9, 
  3.654439935865321*^9}, {3.6544467558291187`*^9, 3.654446756090638*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQEmDtP38H58vP+pPYRv51DFdFxAJ+0RlO/icKpY
VU7F+gGU7+nAa2TfsDr2LpTv5zDtpOrLKubbEH5DoEOmjlUCo9pNqHyIQ7KO
yJmc+deh8mEOxY5vOm0irkHlIx16xG4s+O5wFSof7XDhV7DCN78rUPk4h7Xp
hl9nV12G8B0SHM4p3Hnlv+8SVH2iw7tVR9luikL5B5IctFzS67/VXoTqT3HI
yYlilf5yAao/1aHutskr2zIovyHNYeW7VTG7mKD8A+kO+gu97QoMzkP1ZzrM
Kiz5aJJ9zh4ARbFbDA==
      "]]}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0, 200.}, {0, 0.6796741207198406}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6544333720303993`*^9, 3.654433373148519*^9}, {
   3.654439801627036*^9, 3.654439825415874*^9}, 3.654439937652936*^9, 
   3.654444642206094*^9, 3.6545062539085817`*^9, 3.65450762921321*^9, 
   3.6545400818822107`*^9, 3.6741703341089983`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", 
       RowBox[{
        RowBox[{"f", "[", "n", "]"}], "\[LeftDoubleBracket]", 
        RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "30", ",", "3000", ",", "100"}], "}"}]}], "]"}], "//",
    "OutputForm"}]}]], "Input",
 CellChangeTimes->{{3.654506236663907*^9, 3.6545062369114513`*^9}, 
   3.654506268997102*^9, {3.6545063462484713`*^9, 3.654506352110433*^9}, {
   3.6545073001223183`*^9, 3.654507300250844*^9}}],

Cell[OutputFormData["\<\
{{30, 0.5749721839602693}, {130, 0.292865733485553}, {230, \
0.22195596055184033}, {330, 0.18589188713766647}, {430, 0.16312766409729773}, \

 {530, 0.14709177685851835}, {630, 0.13501235409290133}, {730, \
0.12549113653245939}, {830, 0.11773637682034711}, {930, 0.11126174309926717}, \

 {1030, 0.10574982739356736}, {1130, 0.10098349533617251}, {1230, \
0.09680851889603281}, {1330, 0.09311193078205432}, {1430, \
0.08980883670159098}, 
 {1530, 0.0868340404773474}, {1630, 0.08413653013887451}, {1730, \
0.08167574306621378}, {1830, 0.07941896556632376}, {1930, \
0.07733948225111607}, 
 {2030, 0.07541523221988523}, {2130, 0.07362781578522108}, {2230, \
0.07196174855986487}, {2330, 0.07040389325070238}, {2430, \
0.06894302119906079}, 
 {2530, 0.06756947004738358}, {2630, 0.0662748735794471}, {2730, \
0.06505194641421791}, {2830, 0.06389431085873229}, {2930, \
0.06279635649885508}}\
\>", "\<\
{{30, 0.574972}, {130, 0.292866}, {230, 0.221956}, {330, 0.185892}, {430, \
0.163128}, {530, 0.147092}, {630, 0.135012}, {730, 0.125491}, 
 
  {830, 0.117736}, {930, 0.111262}, {1030, 0.10575}, {1130, 0.100983}, {1230, \
0.0968085}, {1330, 0.0931119}, {1430, 0.0898088}, {1530, 0.086834}, 
 
  {1630, 0.0841365}, {1730, 0.0816757}, {1830, 0.079419}, {1930, 0.0773395}, \
{2030, 0.0754152}, {2130, 0.0736278}, {2230, 0.0719617}, 
 
  {2330, 0.0704039}, {2430, 0.068943}, {2530, 0.0675695}, {2630, 0.0662749}, \
{2730, 0.0650519}, {2830, 0.0638943}, {2930, 0.0627964}}\
\>"], "Output",
 CellChangeTimes->{3.6545062765051413`*^9, 3.654506359480157*^9, 
  3.6545073267422123`*^9, 3.6545076546642838`*^9, 3.6545401079677267`*^9, 
  3.674170363091504*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{"data", ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Gray"}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"fit", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "30", ",", "3000"}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.654447046730748*^9, 3.6544470469191103`*^9}, {
  3.654447080599118*^9, 3.654447080729974*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ListPlot", "::", "lpn"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(\\*FrameBox[\\\"{{30., 0.574972}, {130., \
0.292866}, {230., 0.221956}, {330., 0.185892}, {430., 0.163128}, {530., \
0.147092}, {630., 0.135012}, {730., 0.125491}, {830., 0.117736}, {930., \
0.111262}, {1030., 0.10575}, {1130., 0.100983}, {1230., 0.0968085}, {1330., \
0.0931119}, {1430., 0.0898088}, {1530., 0.086834}, {1630., 0.0841365}, \
{1730., 0.0816757}, {1830., 0.079419}, {<<2>>}, {<<2>>}, {2130., 0.0736278}, \
{2230., 0.0719617}, {2330., 0.0704039}, {2430., 0.068943}, {2530., \
0.0675695}, {2630., 0.0662749}, {2730., 0.0650519}, {2830., 0.0638943}, \
{2930., 0.0627964}}\\\", Rule[BoxFrame, False], Rule[BoxMargins, False]]\\)\
\[NoBreak] is not a list of numbers or pairs of numbers. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/ListPlot\\\", ButtonNote -> \
\\\"ListPlot::lpn\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.654507654905858*^9, 3.654540108244935*^9, 
  3.6741703634733553`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ListPlot", "::", "lpn"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(\\*FrameBox[\\\"{{30., 0.574972}, {130., \
0.292866}, {230., 0.221956}, {330., 0.185892}, {430., 0.163128}, {530., \
0.147092}, {630., 0.135012}, {730., 0.125491}, {830., 0.117736}, {930., \
0.111262}, {1030., 0.10575}, {1130., 0.100983}, {1230., 0.0968085}, {1330., \
0.0931119}, {1430., 0.0898088}, {1530., 0.086834}, {1630., 0.0841365}, \
{1730., 0.0816757}, {1830., 0.079419}, {<<2>>}, {<<2>>}, {2130., 0.0736278}, \
{2230., 0.0719617}, {2330., 0.0704039}, {2430., 0.068943}, {2530., \
0.0675695}, {2630., 0.0662749}, {2730., 0.0650519}, {2830., 0.0638943}, \
{2930., 0.0627964}}\\\", Rule[BoxFrame, False], Rule[BoxMargins, False]]\\)\
\[NoBreak] is not a list of numbers or pairs of numbers. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/ListPlot\\\", ButtonNote -> \
\\\"ListPlot::lpn\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.654507654905858*^9, 3.654540108244935*^9, 
  3.674170363570599*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Show", "::", "gcomb"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Could not combine the graphics objects in \
\[NoBreak]\\!\\(Show[\\(\\(\\(\\(ListPlot[\\(\\(\\*FrameBox[\\(\[LeftSkeleton]\
 543 \[RightSkeleton]\\), Rule[BoxFrame, False], Rule[BoxMargins, False]], \
\\(\\(PlotStyle \[Rule] \
\\*InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[0], \
RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[GrayLevel[0.5`], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[AspectRatio, 1], Rule[Frame, True], Rule[FrameStyle, \
GrayLevel[0.33333333333333337`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \\\"GrayLevel[0.5]\\\"], \
Rule[Appearance, None], Rule[BaseStyle, List[]], Rule[BaselinePosition, \
Baseline], Rule[DefaultBaseStyle, List[]], RuleDelayed[ButtonFunction, \
With[List[Set[Typeset`box$, EvaluationBox[]]], If[Not[AbsoluteCurrentValue[\\\
\"Deployed\\\"]], CompoundExpression[SelectionMove[Typeset`box$, All, \
Expression], Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, GrayLevel[0.5`]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"GrayLevelColorValueSelector\\\"], List[0, List[Left, \
Bottom]], List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], GrayLevel[0.5`], \
Rule[Editable, False], Rule[Selectable, False]]\\)\\)\\)\\)]\\)\\), \
\\*GraphicsBox[List[], List[Rule[DisplayFunction, Identity], \
Rule[AspectRatio, NCache[Power[GoldenRatio, -1], 0.6180339887498948`]], \
Rule[Axes, List[True, True]], Rule[AxesLabel, List[None, None]], \
Rule[AxesOrigin, List[0, 0]], RuleDelayed[DisplayFunction, Identity], \
Rule[Frame, List[List[False, False], List[False, False]]], Rule[FrameLabel, \
List[List[None, None], List[None, None]]], Rule[FrameTicks, \
List[List[Automatic, Automatic], List[Automatic, Automatic]]], \
Rule[GridLines, List[None, None]], Rule[GridLinesStyle, \
Directive[GrayLevel[0.5`, 0.4`]]], Rule[Method, \
List[Rule[\\\"DefaultBoundaryStyle\\\", Automatic], Rule[\\\"DefaultMeshStyle\
\\\", AbsolutePointSize[6]], Rule[\\\"ScalingFunctions\\\", None]]], \
Rule[PlotRange, List[List[30, 3000], List[0.`, 0.`]]], \
Rule[PlotRangeClipping, True], Rule[PlotRangePadding, \
List[List[Scaled[0.02`], Scaled[0.02`]], List[Scaled[0.05`], \
Scaled[0.05`]]]], Rule[Ticks, List[Automatic, Automatic]]]]\\)\\)]\\)\
\[NoBreak]. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Show/gcomb\\\", ButtonNote -> \
\\\"Show::gcomb\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.654507654905858*^9, 3.654540108244935*^9, 
  3.674170363630849*^9}],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     InterpretationBox[
      FrameBox[
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"30", ",", " ", "0.574972"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"130", ",", " ", "0.292866"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"230", ",", " ", "0.221956"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"330", ",", " ", "0.185892"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"430", ",", " ", "0.163128"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"530", ",", " ", "0.147092"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"630", ",", " ", "0.135012"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"730", ",", " ", "0.125491"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"830", ",", " ", "0.117736"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"930", ",", " ", "0.111262"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1030", ",", " ", "0.10575"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1130", ",", " ", "0.100983"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1230", ",", " ", "0.0968085"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1330", ",", " ", "0.0931119"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1430", ",", " ", "0.0898088"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1530", ",", " ", "0.086834"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1630", ",", " ", "0.0841365"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1730", ",", " ", "0.0816757"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1830", ",", " ", "0.079419"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1930", ",", " ", "0.0773395"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"2030", ",", " ", "0.0754152"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"2130", ",", " ", "0.0736278"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"2230", ",", " ", "0.0719617"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"2330", ",", " ", "0.0704039"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"2430", ",", " ", "0.068943"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"2530", ",", " ", "0.0675695"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"2630", ",", " ", "0.0662749"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"2730", ",", " ", "0.0650519"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"2830", ",", " ", "0.0638943"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"2930", ",", " ", "0.0627964"}], "}"}]}], "}"}],
       BoxFrame->False,
       FrameMargins->{{False, False}, {False, False}}],
      OutputForm[{{30, 0.5749721839602693}, {130, 0.292865733485553}, {
        230, 0.22195596055184033`}, {330, 0.18589188713766647`}, {
        430, 0.16312766409729773`}, {530, 0.14709177685851835`}, {
        630, 0.13501235409290133`}, {730, 0.12549113653245939`}, {
        830, 0.11773637682034711`}, {930, 0.11126174309926717`}, {
        1030, 0.10574982739356736`}, {1130, 0.10098349533617251`}, {
        1230, 0.09680851889603281}, {1330, 0.09311193078205432}, {
        1430, 0.08980883670159098}, {1530, 0.0868340404773474}, {
        1630, 0.08413653013887451}, {1730, 0.08167574306621378}, {
        1830, 0.07941896556632376}, {1930, 0.07733948225111607}, {
        2030, 0.07541523221988523}, {2130, 0.07362781578522108}, {
        2230, 0.07196174855986487}, {2330, 0.07040389325070238}, {
        2430, 0.06894302119906079}, {2530, 0.06756947004738358}, {
        2630, 0.0662748735794471}, {2730, 0.06505194641421791}, {
        2830, 0.06389431085873229}, {2930, 0.06279635649885508}}],
      Editable->False], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0.5], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          FrameStyle->GrayLevel[0.33333333333333337`],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "GrayLevel[0.5]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0.5]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0.5],
       Editable->False,
       Selectable->False]}]}], "]"}], ",", 
   GraphicsBox[{},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{
     "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
      AbsolutePointSize[6], "ScalingFunctions" -> None},
    PlotRange->{{30, 3000}, {0., 0.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "]"}]], "Output",
 CellChangeTimes->{{3.654447020572028*^9, 3.654447047872963*^9}, {
   3.6544470809542847`*^9, 3.6544471359821253`*^9}, {3.654447206314301*^9, 
   3.654447229877638*^9}, 3.654447673375708*^9, 3.654447716129366*^9, 
   3.654447857789185*^9, 3.654507655183056*^9, 3.654540108580628*^9, 
   3.6741703636422377`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"k", ",", 
           RowBox[{"f", "[", 
            RowBox[{"k", ",", "n"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "0", ",", "n", ",", "2"}], "}"}]}], "]"}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}], ",", 
     RowBox[{"Plot", "[", 
      RowBox[{
       FractionBox["1", 
        RowBox[{"1", "+", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{
           RowBox[{"-", "3"}], " ", 
           SuperscriptBox["n", 
            RowBox[{"-", ".48"}]], 
           RowBox[{"(", 
            RowBox[{"x", "-", 
             RowBox[{"n", "/", "2"}]}], ")"}]}]]}]], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", "n"}], "}"}]}], "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "10", ",", "100", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6545074840310507`*^9, 3.654507540255352*^9}, {
   3.6545075736574078`*^9, 3.6545075769067507`*^9}, 3.654507715345661*^9, {
   3.6545077494842787`*^9, 3.654507752755437*^9}, {3.654507816809532*^9, 
   3.654507837199506*^9}, {3.654507903934009*^9, 3.654507974869681*^9}, {
   3.65450824056221*^9, 3.654508255102521*^9}, {3.654508403812558*^9, 
   3.6545084358708963`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 10, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n$$], 10, 100, 1}}, Typeset`size$$ = {
    360., {112., 117.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`n$12906$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = 10}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$12906$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Show[
        ListPlot[
         Table[{$CellContext`k, 
           $CellContext`f[$CellContext`k, $CellContext`n$$]}, {$CellContext`k,
            0, $CellContext`n$$, 2}], PlotStyle -> Red], 
        Plot[
        1/(1 + E^((-3) $CellContext`n$$^(-0.48) ($CellContext`x - \
$CellContext`n$$/2))), {$CellContext`x, 0, $CellContext`n$$}]], 
      "Specifications" :> {{$CellContext`n$$, 10, 100, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{405., {156., 161.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.654507918441496*^9, 3.654507975589332*^9}, {
   3.654508244794991*^9, 3.654508255520281*^9}, {3.6545084088056*^9, 
   3.6545084363379507`*^9}, 3.654540111567367*^9, 3.67417036370033*^9}]
}, Open  ]]
},
WindowToolbars->"EditBar",
WindowSize->{1276, 699},
WindowMargins->{{0, Automatic}, {Automatic, -1}},
FrontEndVersion->"10.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 23, \
2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 486, 14, 35, "Input"],
Cell[1069, 38, 919, 25, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2025, 68, 1026, 30, 51, "Input"],
Cell[3054, 100, 800, 20, 57, "Output"]
}, Open  ]],
Cell[3869, 123, 776, 21, 57, "Input"],
Cell[CellGroupData[{
Cell[4670, 148, 444, 8, 28, "Input"],
Cell[5117, 158, 382, 5, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5536, 168, 198, 5, 28, "Input"],
Cell[5737, 175, 234, 3, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6008, 183, 170, 4, 28, "Input"],
Cell[6181, 189, 214, 3, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6432, 197, 402, 11, 28, "Input"],
Cell[6837, 210, 1673, 34, 328, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8547, 249, 853, 21, 46, "Input"],
Cell[9403, 272, 121538, 2091, 238, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[130978, 2368, 298, 8, 28, "Input"],
Cell[131279, 2378, 785, 23, 64, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[132101, 2406, 1654, 41, 70, "Input"],
Cell[133758, 2449, 1422, 34, 244, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[135217, 2488, 608, 15, 28, "Input"],
Cell[135828, 2505, 1674, 34, 97, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[137539, 2544, 513, 13, 28, "Input"],
Cell[138055, 2559, 1130, 19, 101, "Message"],
Cell[139188, 2580, 1128, 19, 101, "Message"],
Cell[140319, 2601, 3146, 51, 56, "Message"],
Cell[143468, 2654, 6760, 156, 176, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[150265, 2815, 1448, 37, 54, "Input"],
Cell[151716, 2854, 2046, 41, 334, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
